{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n#include \"vex.h\"\n#include<cmath>\n\nusing namespace vex;\n\n// Driving motors\nvex::motor left_motor1 = motor(PORT1, ratio6_1, true);\nvex::motor left_motor2 = motor(PORT2, ratio6_1, true);\nvex::motor left_motor3 = motor(PORT3, ratio6_1, true);\nvex::motor_group left_motors (left_motor1, left_motor2, left_motor3);\n\nvex::motor right_motor1 = motor(PORT6, ratio6_1, false);\nvex::motor right_motor2 = motor(PORT7, ratio6_1, false);\nvex::motor right_motor3 = motor(PORT8, ratio6_1, false);\nvex::motor_group right_motors (right_motor1, right_motor2, right_motor3);\n\nvex::motor intake = motor(PORT11, false);\nvex::motor under = motor(PORT12, true);\nvex::motor over = motor(PORT13, true);\nvex::motor top = motor(PORT14, true);\nvex::motor_group suball (intake, top);\nvex::motor_group all (intake, under, over, top);\n\n// Colorsort sensor\nvex::optical sensor = optical(PORT16);\nvex::digital_out lock = digital_out(Brain.ThreeWirePort.A);\nvex::digital_out lift = digital_out(Brain.ThreeWirePort.B);\n\nvex::controller Controller = controller(primary);\n\nbool lpress = false;\nbool sort = true;\nbool l = false;\nbool r = false;\n\nint main() {\n  while (true) {\n    left_motors.setVelocity(0, percent);\n    right_motors.setVelocity(0, percent);\n          \n    int throttle = -Controller.Axis3.position();\n    int steering = -Controller.Axis1.position();\n\n    left_motors.setVelocity(throttle + steering, percent);\n    right_motors.setVelocity(throttle - steering, percent);\n\n    if (Controller.ButtonR1.pressing()) {\n      r = true;\n      all.setVelocity(65, percent);\n      under.setVelocity(40, percent);\n      if (!sort) {\n        if (lock) {\n          all.setVelocity(75, percent);\n        }\n        all.spin(forward);\n      } else {\n        suball.spin(forward);\n        over.spin(reverse);\n        under.spin(forward);\n      }\n    } else if (Controller.ButtonR2.pressing()) {\n      r = true;\n      all.setVelocity(75, percent);\n      if (!sort) {\n        all.spin(reverse);\n      } else {\n        suball.spin(reverse);\n        over.spin(reverse);\n        under.spin(forward);\n      }\n    } else {\n      r = false;\n      if (!l) {\n      all.stop();\n      }\n    }\n\n    if (Controller.ButtonL2.pressing()) {\n      l = true;\n      all.setVelocity(75, percent);\n      intake.spin(forward);\n      top.spin(reverse);\n      over.setVelocity(40, percent);\n      over.spin(forward);\n      under.setVelocity(25, percent);\n      under.spin(forward);\n    } else {\n      l = false;\n      if (!r) {\n      all.stop();\n      }\n    }\n\n    if (Controller.ButtonL1.pressing()) {\n      if (!lpress) {\n        lock = !lock;\n        lpress = true;\n      }\n    } else {\n      lpress = false;\n    }\n\n    if (Controller.ButtonUp.pressing()) {\n      lift = true;\n    }\n\n    if (Controller.ButtonDown.pressing()) {\n      lift = false;\n    }\n    \n    // test\n    sort = Controller.ButtonB.pressing();\n\n    left_motors.spin(forward);\n    right_motors.spin(forward);\n\n    this_thread::sleep_for(10);\n  }\n}","textLanguage":"cpp","robotConfig":[],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.10","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}
